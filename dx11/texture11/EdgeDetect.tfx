//@author: mcescherr
//@help: edge detect hope this werks
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Mirror;
    AddressV = Mirror;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	 float4 lum = float4(0.30, 0.59, 0.11, 1);
 
  // TOP ROW
  float s11 = dot(texture2d.Sample(linearSampler, input.uv + float2(-1.0f / 1024.0f, -1.0f / 768.0f)), lum);   // LEFT
  float s12 = dot(texture2d.Sample(linearSampler, input.uv + float2(0, -1.0f / 768.0f)), lum);             // MIDDLE
  float s13 = dot(texture2d.Sample(linearSampler, input.uv + float2(1.0f / 1024.0f, -1.0f / 768.0f)), lum);    // RIGHT
 
  // MIDDLE ROW
  float s21 = dot(texture2d.Sample(linearSampler, input.uv + float2(-1.0f / 1024.0f, 0)), lum);                // LEFT
  // Omit center
  float s23 = dot(texture2d.Sample(linearSampler, input.uv + float2(-1.0f / 1024.0f, 0)), lum);                // RIGHT
 
  // LAST ROW
  float s31 = dot(texture2d.Sample(linearSampler, input.uv + float2(-1.0f / 1024.0f, 1.0f / 768.0f)), lum);    // LEFT
  float s32 = dot(texture2d.Sample(linearSampler, input.uv + float2(0, 1.0f / 768.0f)), lum);              // MIDDLE
  float s33 = dot(texture2d.Sample(linearSampler, input.uv + float2(1.0f / 1024.0f, 1.0f / 768.0f)), lum); // RIGHT
 
  // Filter 
  float t1 = s13 + s33 + (2 * s23) - s11 - (2 * s21) - s31;
  float t2 = s31 + (2 * s32) + s33 - s11 - (2 * s12) - s13;
 
  float4 col;
 
  if (((t1 * t1) + (t2 * t2)) > 0.05) {
  col = float4(0,0,0,1);
  } else {
    col = float4(1,1,1,1);
  }
 
  return col;
}


technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



